git? (코드의 버전 관리 시스템)
    --- 히스토리 보관하는 시스템 -> 원격저장소 github, gitlab -> 최대 규모의 개발자 커뮤니티, 코드 공유
    --- 소통을 위한 창구 (리뷰(댓글), 이슈(에러) 시스템) -> 협업 도구 -> organization -> 깃허브 플로우

    1. 히스토리 보관 (버전관리)
        => 왜 히스토리 보관해야하는지 ?
        1. 까먹기 쉬워서 -> 이전 코드 참고
        2. 버전 관리 -> 버전 업데이트 이후 에러가 생기면, 롤백
        3. 코드 삭제 -> 개발 과정에서 롤백

    원격 저장소?
        1. 협업하는 팀원과의 히스토리 공유 -> 드라이브(파일)
        2. 화면(interface)를 제공하는 웹 사이트에 원격으로 코드를 공유 가능
        3. 원한다면 누구나 어디에서나 어디서든 코드를 불러올 수 있음

    2. 다른 개발자와의 코드 공유 (커뮤니티)
    3. 이슈 트래킹 (이슈, 에러 추적)
    4. 리뷰를 통한 개발 문화와 협업 문화 형성 - 에자일

--------------------------------------------------------------------------------------------------

Github -> sign-up
   https://github.com/

   Git -> downloads
   https://git-scm.com/downloads

   [window]
   64bit, setup -> next

   [mac]
   Mac -> homebrew install ->  brew install git
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    [확인]
    git --version (window 명령프롬프트 cmd, mac 터미널)

-------------------------------------------------------------------------------------------------

로컬 저장소와 원격 저장소 차이

* git - 로컬 저장소 (컴퓨터)
* github - 원격 저장소 (웹사이트)
    저장하고 싶은 파일 선택 -> 컴퓨터 저장 -> 원격 저장소 

github-flow

    [준비]
    1. 내가 저장하고 싶은 코드들이 있는 폴더를 기준으로 로컬 저장소를 생성
        git init

    2. 해당 폴더 내에서 내가 저장하고 싶은 파일을 선택 (스테이징)
        git add 파일명
        git add . (폴더 내 전체 파일이 스테이징)

    3. 스테이징 된 파일을 로컬 저장소에 저장 (commit)
        git commit -m '헤더' -m '본문' -m '각주'
        git commit -am '헤더' (기존에 커밋 내용을 덮어씌웁니다)

    4. 원격 저장소(깃허브 레퍼지토리)에 연결
        git remote add 원격저장소명 원격저장주소
        ex) git remote add origin https://....git

        git remote => 현재 연결된 원격 저장소 목록 확인
        git remote remove 원격저장소명 => 원격 저장소 연결 해제

    5. 히스토리 비교 (로컬 저장소의 버전과 원격 저장소의 버전과 같을까요?)
        로컬 저장소 != 원격 저장소 
        = 버전이 다름 -> 동기화 (둘을 똑같이 만들 필요가 있다)

    6. 원격 저장소와 동기화
        git pull 원격저장소명 브랜치명 (main/master)
        ex) git pull origin main (개발 도중 다른 개발자의 수정 내역을 동기화)
            git pull origin main --rebase (관계 없는 히스토리를 동기화)
            git pull origin main --allow-unrelated-histories

    7. 로컬 저장소의 저장내역 -> 원격 저장소에 밀어넣기
        git push 원격저장소명 브랜치명(main/master)
        ex) git push origin main

        -- pull 받은
        히스토리(기록 일치) 동기화된 원격 저장소와 다른 부분만 push되어 동기화(로컬-원격, 내용물 일치)

    8. 분기 - branch
        나뭇가지

            git branch 브랜치명 [브랜치 생성]
            git checkout 브랜치명 [브랜치 이동]
            git checkout -b 브랜치명 [생성한 후 이동]

-------------------------------------------------------------------------------------------------         

실습

1. 각자 개인 레퍼지토리에 내가 올린 코드 push하기

2. 오거나이제이션(협업 레퍼지토리)를 생성해서 코드를 공동으로 보관
   아래와 같은 플로우를 진행

   (1) 오거나이제이션 생성 *
   (2) 팀원 초대 -> 메일 -> 허용 *
   (3) 권한 *
   (4) 레퍼지토리 생성 *
   (5) init *
   (6) feat/test, feat/test-2
   (7) git hub commit convention
        ex) [기능추가] 로그인 기능을 추가했습니다.
            로그인
            feat(login) : added login feature

            => 가독성과 커밋 히스토리의 보관을 용이하게 하기 위하여
               커밋 메시지를 일치

    (8) pull request
        => 제가 코드 개발을 완료했어요, merge해도 괜찮을까요?

    (9) reviewer -> code review -> 수정 요청
    (10) 당사자가 직접 코드를 수정 -> review -> reviewer approve
    (11) 당사자가 코드를 merge

-------------------------------------------------------------------------------------------------

    powershell의 권한을 해제하는 명령어

    1. 
        윈도우에서 powershell 검색 후 관리자 권한으로 실행
        Get-ExecutionPolicy
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
        Y + Enter
        VSCODE 종료 후 재실행

        or
        cmd / git-bash 

-------------------------------------------------------------------------------------------------

github id 인증 및 등록 (1회)
    git config --global user.email "깃허브 이메일주소"
    git config --global user.name "깃허브 네임"

    -> git config --list + enter


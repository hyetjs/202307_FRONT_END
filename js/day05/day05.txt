배열의 내장함수와 고차함수

    내장함수 (원본배열, 복사본, 반환 값의 유무)
        push()
            ()안의 데이터를 원본 배열의 맨 끝 요소(el)로 추가
            ex) arr = ["짱구", "흰둥이"]
                arr.push("신형만")
                console.log(arr) // ["짱구", "흰둥이", "신형만"]

        pop()
            원본 배열의 맨 끝 요소를 제거, 제거된 요소를 반환

            ex) const arr = [1,2,3,4]
                const a = arr.pop()
                console.log(arr) // [1, 2, 3]
                console.log(a) // 4

        unshift()
            ()안의 데이터를 원본 배열의 맨 앞에 추가

        shift 
            원본 배열의 맨 앞에 요소를 제거, 제거된 요소를 반환

        concat(arr1,arr2)
            ()안의 두 배열을 합친 하나의 복사본 배열을 반환

            arr1=[1,2,3,4,5] arr2=[1,2,3,4]

            [1,2,3,4,5,1,2,3,4]

        join
            배열의 요소 사이에 원하는 문자를 삽입한 문자열을 반환
            ex) [1,2,3,4,5].join("-") => "1-2-3-4-5"
                [1,2,3,4,5].join() => "12345" 
                ["‹div>",... J.join() => "‹div›‹/divs
                kdiv›‹/div›" 

        reverse 
            원본 배열 역순 배치
            ex) [1,2,3,4,5] -> [5,4,3,2,1]

        splice(start,count,item)
            - start부터 시작하는 인덱스 번호부터 count만큼 원본 배열에 요소를 제거
            - 제거한 부분에 item을 대체할 수 있음
            - 배열의 특정 부분을 제거

            const arr = [1, 2, 3, 4, 5, 6, 7]
            arr.splice(3, 3, "hello")
            (1, 2, 3, hello, 7)

        slice 
            -원본 배열의 데이터를 삭제하지는 않으나, start부터 end 직전까지(포함x)

        index0f 

        includes

----------------------------------------------------------------------------------------
콜백함수
    부모 함수의 인자로 함수가 전달, 그러나 해당 함수의 실행은
    부모 함수에 의해서 실행되고 매개변수도 부모함수에서 전달 받습니다.

    function 부모함수(자식함수){
        ...
        자식함수("안녕하세요")
    }

    function a(str) {
    console.log (str)
    }

    function b (func){
    func(" 안녕하세요")
    }

    b((str)=>{
    console. log(str)}
    ) // 위에 a 함수를 선언하지 않고 익명함수로 콜백함수 선언


    고차함수
        map
            배열을 순회(순서대로 반복)하며 각 요소에 대하여 인자로 주어진
            * 콜백함수의 반환값으로 새로운 배열을 생성 *
            ex) 
                arr = [1,2,3,4,5]
                const arr2 = arr.map((el, index, origin)=>{
                    return el + 1
                })
----------------------------------------------------------------------------------------
        filter
            arr = [1,2,3,4,5]
            const arr2 = arr.filter((el)=> el !== 5)
            // [1,2,3,4]
            // 특정 조건을 맞는 요소들만 선택하여 새로운 배열이 필요
            // 삭제
----------------------------------------------------------------------------------------
        find
            배열 순회, 콜백 함수, 조건식에 맞는 첫번째 요소 반환
            내가 찾고자 하는 특정 요소를 찾을 때 -> find
            내가 찾고자 하는 특정 조건을 만족하는 여러 요소를 찾을 때 -> filter

        findIndex
            배열 순회, 콜백 함수, 조건식에 맞는 첫번째 요소의 인덱스 반환
            값이 없다면 -1
            
            ex)
            const posts = [
                {
                    id : 1,
                    content : '내용',
                    title : '제목',
                    User : {
                        nickName : "zㅣ존혜선12"
                    }
                }
                {
                    id : 2,
                    content : '내용',
                    title : '제목',
                    User : {
                        nickName : "zㅣ존혜선12"
                    }
                }
                {
                    id : 3,
                    content : '내용',
                    title : '제목',
                    User : {
                        nickName : "zㅣ존혜선12"
                    }
                }
            ]
            const findPost = posts.find((el) => el.id ===3)
            findPsot.content = "수정 내용"

            const findPostIndex = posts.findIndex((el) => el.id ===3)
            posts[findPsotIndex].content = "수정 내용"

            인덱스가 검색속도는 더 빠름
            find,findIndex는 수정,
            filter는 삭제용도로 많이 사용됨

        * reduce
        every
        some
        sort

        + 배열 생성, 유사 배열 객체, forEach, for...in, for...of



1. for
증감식, 조건식 -> 인덱스 조정 가능, 횟수
반복의 조건을 마음대로 설정할 수 있다

2. forEach
이터러블, 모든 요소 순회, 인덱스 -> 순서 보장
              -------
                  -----> 배열의 특정 요소를 가지고와야할 때
            
3. for in
이터러블하지 않은 객체의 key

4. for of
이터러블, 모든 요소 순회, 순서 보장x


--------------------------------------------------------------------------------

 백엔드 데이터 상상 > 배열의 내장함수 -> 반복문

--------------------------------------------------------------------------------

 빌트인 객체

 console.log()
 Array().fill()

 String
 Math
 Date
 Number ...


 1. Math
  Math.max(a ... z) a~z중 최댓값
    ex) Math.max(1,2,3) // 3
        Math.min(1,2,3) // 1
        ----> javascript 배열 내 최댓값


      threow new Error('error')
      threow new ReferenceError()
                 RangeError()

      https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects

   Math.random() 0~1 사이의 무작위 숫자 

   Math.floor(소수) 소수점 이하 버림
        ceil(소수) 소수점 이하 올림
        round(소수) 소수점 첫번째 자리에서 반올림
        trunc(소수) 소수점 이하 절삭


  Math.abs(a) -> 절대값
  Math.sqrt(a) -> 제고급
  Math.cbrt(a) -> 세제곱근
  Math.log(a) -> 자연로그
  ...


  Number
    Number.MAX_VALUE : 자바스크립트에서 사용 가능한 가장 큰 숫자 (1.7e+308)
    Number.MIN_VALUE : 자바스크립트에서 사용 가능한 가장 작은 숫자
    Nunber.isFinit() : 유한수 무한수
    Number.toString() : 숫자를 문자열로 반환

    Number("5") : 문자를 숫자로 반환 ---> parseInt("5")
    ex) "5" -> 5
    형변환 -> 자료형을 변환

    typeof 5 // number
    if(type 5 === 'number'){
      ...
    }


  String

    String.length() : 문자열 길이(몇글자)
    ex) "안녕하세요".length() // 5

    String.charAt(index) : 해당 인덱스의 문자
    ex) "안녕하세요".charAt(3) // 세

    String.replace('a','b') //  a라는 문자를 b로 대체한다
    ex) "Hello"replace('l", "o") // Heooo

    String.concat()
    ex) "안녕".concat("하세요") // 안녕하세요

    String.split() : 특정 기준으로 문자열 분할

    String.repeat(n) : n번 문자열 반복
    ex) "안녕".repeat(2) // 안녕안녕


  Date
    날짜와 시간을 생성하는 빌트인 함수
    // 로컬 환경 시간을 기준 -> 자주 사용하지 않습니다 -> dayjs, mommentJS, luxon

    시간 연산

    협정 세계시 (1972년 1월 1일에 지정)

    유닉스의 시간이 지나기 시작한 1970년도 1월 1일 자정을 기준으로 몇초가 지났는지
    ms 단위로 변환한 것을 utc(협정 세계시)

    한국 utc+9

    서버(백엔드)에서 시간을 저장할 떄는 utc0를 기준으로 저장
    utc + 09:00

--------------------------------------------------------------------------------

서버 시간 -> 시간이 소요 -> 한번 가지고 와서 1초씩 가게 -> 자바스크립트에서 1초는 정확한 1초가 아님
-> 오차 발생 -> 시간이 밀리거나 빨리가는 현상 발생 -> 새로고침

--------------------------------------------------------------------------------


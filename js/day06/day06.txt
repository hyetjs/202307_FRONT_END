reduce 
    줄이다, 누적
    현재요소와 다음요소의 연산된 누적값을 반환

every
모든 요소가 조건을 만족하는지 t/f 반환

some
어느 한 요소라도 조건을 만족하는지 t/f 반환 --> 모두 만족하고 있지 않은지도 검사할 수 있음

sort
    원본 배열의 요소 크기대로 정렬

----------------------------------------------------------------------------------------

배열의 생성

Array. from(객체,()=>{ })
유사 배열 객체를 배열화

* 유사 배열 객체
-> 키 값이 인덱스이고 length 속성을 갖고 있는 배열

ex)
const 유사배열 = {
0 : "김성용",
1: "짱구",
length: 2
}

유사배열[0]
유사배열[1]
유사배열.length

Array () . fill ()
Array (10) -> 배열 생성
ex) Array (10).fill(0).map(()=>{   
})

----------------------------------------------------------------------------------------

모듈화
    모듈 -> 한가지 이상의 기능을 하고 있는 코드 집단
    * 재사용성 , 유지보수

    파일 단위로 분리하여, 파일에서 다른 파일로 함수나 객체등을 가지고 오는 것
    모듈화가 가능하기 때문에 컴포넌트라고 하는 모듈로 이루어진 컴포넌트 기반의 프레임 워크인

    react, vue, next, svelt, quiwck, astro 등이 현재 가장 유명한 프론트 엔드 프레임워크로 
    존재할 수 있음

----------------------------------------------------------------------------------------

for (index의 조정지 가능, 요소와 인덱스를 모두 가지고 올 수 있음, 순서 보장)
-> 내가 필요한 요소만 반복 , 인덱스 값이 필요할 때(순서 보장)
forEach (모든 요소의 순회, 요소와 인덱스를 모두 가지고 올 수 있음, 순서 보장, 배열)
-> 모든 요소를 순회해야하며, 인덱스 값이 필요할 때(순서 보장)
for ...in (이터러블 하지 않은 객체를 순회, 객체의 key값은 가져올수 있다)
-> 객체를 순회해야할 때
for ...of (모든 요소를 순회, 요소의 값만을 가지고 올 수 있다)
-> 모든 요소를 순회만 하면 될때 , 순서를 보장하지 않는다
----------------------------------------------------------------------------------------

이터러블(순회가능 한) 오브젝트
    객체의 값 중에 Symbol.iterator(반복자) -> next, previous의 명령ㅇ
    가 있는 객체를 이터러블 오브젝트

    일반 객체는 이터러블하지 않기 때문에 순회가 불가능해요

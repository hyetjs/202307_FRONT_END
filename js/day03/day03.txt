* 함수
  자바스크립트는 함수 지향 프로그래밍언어이다.

    함수 지향 프로그래밍이란?
        프로그래밍 패러다임의 한 종류

        프로그래밍 패러다임?
        개발 방법 중 하나, 개발자가 어떠한 관점을 갖고 프로그래밍에 임하는지

        명령형 프로그래밍
            절차 지향 : 순서를 중요 시, 컴퓨터의 처리구조와 유사
                      (ex. C, Colbol ...)
            객체 지향 : 객체들의 집합으로 프로그래밍의 상호작용 표현
                      (ex. Java)
        선언형 프로그래밍
            함수 지향 : 순수 함수를 조합하고 프로그래밍을 만드는 방식
                      (ex. javascript)

        함수 지향 프로그래밍 관련 용어
            불변성 -> 함수 밖에서 함수 내부의 데이터 변형을 일으키지 않는다.
            * 클로저 -> 부모함수가 실행 종료되어도 참조할 수 있는 내부 함수는 기억된다.

            순수함수 -> 입력된 값에만 의존하고, 외부 효과는 영향을 미치지 않는다.
            일급객체 함수 -> 함수는 입력값이 될 수도 있고 변환 값이 될 수도 있다.

            유지관리 기능성 -> 외부 효과에 의존하지 않기 때문에 유지보수 용이
            * 모듈화 -> 한가지 기능 이상의 코드 집단(모듈)으로 분리하여 재사용

            부수효과 -> 함수 밖에서 함수 안의 반환 값에 영향을 끼치는 것 (사이트 이펙트, 외부 효과)
            참조 투명성 -> 동일한 값에는 항상 동일한 반환 값

        => 코드를 분리하여 (모듈화) 필요에 따라 조합하고 재사용할 수 있게 작성

----------------------------------------------------------------------------------------

    함수
        어떠한 기능(특정 연산)을 하는 코드의 집단
        ex)
            function addNumber(파라미터1,파라미터2,...){
                ...연산
                return 반환값(생략 가능)
            }

            * 선언부와 실행부가 나뉘어져 있다.
            * 실행부에서는 선언부가 파라미터로(전달된 값) 받을 값을 전달
            
            함수명 (전달값1, 전달값2)
            addNumber(1,2)

            * 함수의 실행부는 반환값이 없음 => undefined
            const a = addNumber(2,3)
            console.log(a) // undefined

            ex) function addNumber(number1,number2){
                console.log(num1+num2)
            }
            addNumber(2,3) //5
            console.log(addNumber(4,7)) // 5,undefined
            const a = addNumber(3,5) + 3 // NaN
                      ------ undefined

            * 함수에서 연산한 결과값을 외부에서도 사용하고 싶을 때

            ex) function addNumber (num1, num2) {
                return (반환 값) numl + num2
            }

            addNumber(3,5)
            console.log(addNumber(3,5)) // 8
            const a = addNumber(3,5) + 3 // 11
                      ------ 8

        => 함수에 반환(return)이 없으면 함수 실행부의 값은 undefined이다
           return의 유무는 함수 내의 연산을 바깥에서도 사용할지 작성자가 직접 정하는 것

        * return, 실행부, 선언부, 인자, 인수

----------------------------------------------------------------------------------------
        
        (1) 기명함수
            -> 이름을 지어주고 컴퓨터에게 기억시킨 것
            function printHello(){
                console.log("hello")
            }

        (2) 익명함수
            -> 재사용 될 필요가 없는 함수며 콜백함수나 즉시실행함수
            function(){
                ...연산
            }

            => 익명함수는 재사용 가능성이 없고, 혼자서 실행할 수 없기 때문에    
            다른 함수에 의해 실행되거나, 즉시 

        (3) 재귀함수
            -> 함수 안에서 같은 함수를 반복
               (최단 경로 관련 알고리즘)

               function f(n){
                if(n <= 1) return 1
                return n + f(n-1)
               }
               f(10)

        (4) 즉시실행함수
        (function(num1,num2){
            
        })(2,3)

        * (function(){})()
        => 선언과 동시에 실행

        (5) 화살표함수
        

지역변수, 전역변수, 스코프, 스코프 체이닝
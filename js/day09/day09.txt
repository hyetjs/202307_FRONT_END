
 1. addEventListener

  자바스크립트에서 특정 요소에 이벤트를 등록할 때 가장 권장되는 방식
  하나의 요소에 여러개의 이벤트를 등록할 수 있습니다.

  ex)
    DOM(document, window).addEventListener("이벤트명", 콜백함수, option)
    콜백함수 -> 해당 이벤트가 일어났을 때 내가 실행시키고 싶은 함수
    -------
      addEventListener 함수에 인자로 들어가고
      addEventListener가 실행시켜주니까
      해당 콜백함수에서 인자로 event를 받아올 수 있음

      document.querySelector (html 요소 중에서 내가 원하는 요소 찾기)
      document (html 요소, 최상위 요소)

      ex) 
      const print = (e) => {
        console.log(e.target)
        // addEventListener의 콜백함수에 인자로 받아오는 event의 target은
        // 이벤트가 일어난 대상을 의미한다
      }

      document.addEventListener("click", print)
      document.addEventListener("click", (e) => { 
        console.log(e.target)
      })


      function addEventListener(print){
        let event;
        print(event)
      }

      자주 사용하는 이벤트명

      click : 요소 클릭
      mouseover : 요소에 마우스 올렸을 때
      mousedown : 요소에서 마우스를 누르고 있는 중
      mouseleave : 요소에 마우스 떠났을 때
      mouseup : 요소에서 마우스를 눌렀다가 땠을 때
      mousewheal : 요소 안에서 마우스가 움직일 때 마다

      focus : 인풋이 활성화 되어있을 때
      blur : 활성화 되었다가 비활성화 되었을 떄
      keypress : 키를 입력했을 때
      keyup : 키를 누르고 있다 땐 순간
      keydown : 키를 누른 상태
      change(oninput) : input의 값이 변경되었을 때
      invalid : input의 조건을 어겼을 때
      (https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event)
      
-------------------------------------------------------------------------     

 2. 캡쳐링, 버블링

    이벤트 전파 
    (자식을 클릭했는데 부모가 클릭 되거나
    부모를 클릭 했는데 자식이 클릭되는 현상)

    버블링
      자식을 클릭하였을 때 이벤트가 부모 요소로 전파

    캡쳐링 (false)
      부모 요소를 클릭하였을 때 이벤트가 자식 요소로 전파

-------------------------------------------------------------------------

 3. 배너 이벤트

 --------------------------------------------

 1. 메뉴 이벤트, mocking data (가상 데이터) -> UI(append, clonNode)

 2. promise, async/await, 비동기

 3. fetch, axios

 ---------------------------------------------

 다음주 월요일 오전 10:30 ~ 끝날 때 까지 (14:00) - 녹화본 제공
 4. context, closure, prototype, event loop

 ---------------------------------------------
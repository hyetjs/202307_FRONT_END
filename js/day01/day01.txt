-- js 커리큘럼 --
1주차
day01 : js, nodejs, 입출력, 변수, 자료형, 연산자, 조건식, 호이스팅
day02 : 제어문, 반복문, 함수형 프로그래밍(프로그래밍 패러다임), 함수, 지역변수, 전역변수

2주차
* day03 : 모듈화, 객체, 메서드, 배열, 배열의 내장함수와 고차함수, 콜백함수, json
* day04 : javascript 메모리 부여방식, 깊은 복사, 얕은 복사, 전개 연산자, 구조 분해 할당

3주차
day05 : 이터러블 오브젝트, set, map, 상황에 따라 다양한 반복문, 예외 처리
day06 : DOM API, node properties, class, child, 백엔드 없이 게시판 만들기

4주차
day07 : 마우스 이벤트, 배너이벤트, 스크롤 이벤트, 옵저브 인터렉션
* day08 : 비동기, 동기, 이벤트 루프, promise, ajax, axios/fetch

5주차
* day09 : 스레드, 실행컨테스트, 가비지 컬렉터, this 바인딩
* day10 : class, 객체지향, prototype

--------------

Javascript
    1996년 3월
    ----------> 10일만에 태어난 언어
    "HTML 페이지를 동적으로 만들고 싶어" --> 가벼운 언어 --> 성능도 좋지 않았다.

    구글 -> 2009년 v8 엔진 (브라우저 엔진) 출시

Javascript 와 Java의 관계?
    Mocha -> Livescript -> Javascript

Javascript는 인터프리터 언어 
    안녕하세요 -> 컴파일 -> 기계어 -> 0101010101

    컴파일 언어와는 반대로 변환 과정 없이 소스 코드를 바로 실행하는 프로그램 언어
    v8 엔진에 의하여 필요에 따라 컴파일 과정을 거칠 수 있도록하여 자바스크립트의 성능을 향상

    NaN + a => NaNa
    JSON
    ---- 데이터 양식 -> 키와 값

------------------------------------------------------------------------------
 
    JS 적용법

    -내부-
    <html>
        <script>
            ....javascript
        </script>
    </html>

    -외부-
    *.js
    <html>
        ....
        <script src="경로"></script>
    </html>

------------------------------------------------------------------------------

    입출력

    입력 (input)
    console.log();
    console.error();
    window.(생략가능) alert();
    window.confirm();

    출력 (output)
    window.prompt();

    window -> browser
    browser가 없으면 실행이 되지 않습니다.

    * 개발중 -> 에러가 생김 -> 어디서 에러가 생겼는지 알 수 있을까?
      1 ----> 10까지 개발

      5 -> console.log(5) -> 잘 나와 -> 6 ~ 10
      8 -> console.log(8) -> 안 나와 -> 6 ~ 8

      -> 개발 중 디버깅을 위해서 로그를 확인할 필요가 있고 이 때 console.log()를 활용하여
         단, 디버깅이 끝난 후에는 삭제 해주어야 한다.


------------------------------------------------------------------------------

    .js를 브라우저 환경이 아닌 다른 환경에서 직접 실행할 수 있는 NodeJS 환경에서는 window가 실행되지 않습니다.

    NodeJS
        크롬의 v8엔진을 브라우저 바깥으로 꺼내어 JS를 브라우저 외부에서도 실행할 수 있도록 하는 런타임(환경,실행)
        대표적으로 react-js와 같은 js 기반 프레임워크(도구)들이 nodeJS 환경에서 실행된다.

        html 대신 js로 쓰고
        js를 html안에 직접 작성

        설치
        https://nodejs.org/ko/

        무지성 다음 설치 -> 설치 완료 후 -> vscode 재시작 -> 터미널 -> node -v

------------------------------------------------------------------------------
        
        자바스크립트 자료형(데이터의 종류, 타입)

        원시타입
            string 문자열(문자)
            boolean 참/거짓(T/F)
            undefined (데이터의 타입이 지정되어 있지 않은 상태)
            null (값이 명확히 비어있는 상태)
            symbol (이터러블 오브젝트의 키 값으로 사용)

        객체타입 , 참조타입 (집단)
            자바스크립트에서 원시타입을 제외한 모든 것은 객체타입
            하나의 데이터가 아닌 여러 데이터가 집단을 이루고 있는 경우가 많음

        => 아, 자바스크립트에는 이러한 데이터의 종류가 있고, 우리가 이런 데이터를 사용 해야하는구나

------------------------------------------------------------------------------

    변수
        위의 데이터 타입의 데이터를 직접 기입해서 사용할 수 있지만
        console.log(5) --> 5
        console.log(5+1) --> 6
        console.log(5+1+1) --> 7 --> 바뀔 때마다 그전에 있던 과정을 다시 작성

        그러나 해당 데이터를 컴퓨터가 기억하게 하여 일회성 사용으로 그치지 않고
        그 다음 실행에서도 이어서 사용할 수 있으며, 재사용이 가능하도록 하기 위해 변수를 사용한다.

        a = 5;
        console.log(a) --> 5
        a = 5 + 1
        console.log(a) --> 6
        a = 6 + 1
        console.log(a) --> 7 --> 값이 바뀌어도 기존에 있는 연산을 기억하고 있기 때문에 재사용

            항상 변하지 않는 값 --> 바뀌지 않지만 재사용하기 위해 사용
            ----
        변수,상수
        ----
        변하는 값 --> 바뀌는 값을 재사용하기 위해 사용

        var,let,const를 이용하여 정의(선언)할 수 있다.

        * 자바스크립트에서는 변수를 선언할 때 자료형을 따로 지정하지 않습니다.
        ex)
            다른 언어 
            int a = 5;
                a = "안" (x)

            자바스크립트
            let a = 5;
                a = "안" (o) --> let:number a = 5 (타입스크립트)

    선언 
        let/const 변수명 = 값; (선언과 할당)

        let 변수명; (선언)
        변수명 = 값; (할당)

        - const는 상수이기 때문에 재할당이 불가능하 선언과 할당을 동시에 해야만 함
        - 반면 let,var는 변수이기 때문에 선언 후 할당이 가능

------------------------------------------------------------------------------

    var -> 더이상 사용하지 않습니다.
           ES4를 사용해야하는 전자정부프레임워크 기반의 회사가 아닌 이상 사용되지 않습니다.

        옛날에 사용하던 변수 표현법
        (ES6 = ES2015)

        아직도 간혹 보이지만, ES6 이후 문법에 익숙한 개발자 (표준)

        * let/const 와 var의 차이점
            알아야 하는 이유?
                1. 면접
                2. 의도적으로 var

                호이스팅 
                    선언부가 상단으로 끌어올려져
                    선언 이전에도 사용이 가능한 상태

                    console.log(a) -> X
                    var a = 5;
                    
                    자바스크립트는 실행전 선언부를 먼저 수집하여 평가(저장) -> 실행

                    console.log(a) -> undefined -> 예외 상황
                    var a = 5;

                    자바스크립트는 아직 값이 할당되지는 않았지만 a의 값을 인지
                    반면, let과 const는 수집 단계에서 부터 다른 곳에 저장되어 값이 할당되지 않으면
                    참조 에러가 나오도록 설정된 신규 변수

                    console.log(a) -> x -> 참조에러
                    let a = 5;

        => 더 이상 var는 사용하지 않는다
           var는 수집 단계에 수집되어 값이 주어지기 전에도 사용이 가능하며 이러한 현상은 개발 과정에서 예외상황이
           발생하기 쉽다.

           이를 방지하기 위해 let, const가 등장하였으며 이는 var와 다른 곳에 저장되어 값이 없다면 에러가 나오게
           설정 해두었다

           var는 중복선언도 가능, let/const 중복 선언 불가능

           * 실행 전 평가, var는 더이상 안 쓴다.

------------------------------------------------------------------------------

    연산자
        산술연산자
            (+, -, *, /, %)

            ------------------

            let a = 1;
            let b = true;
            (true =1, false=0)
            a+b // 2

            a+null = 1
            (null = 0)
            1+ undefined = NaN (Not a Number)

            1 + "2" = "12"
            (더하기 연산자일 때 하나의 항에 문자열이 있다면 문자열 결과)

        단항 산술 연산자
            ++ 값이 1 증가
            -- 값이 1 감소
            + 영향 x
            - 음수화

        전위 연산자
            ++a - 전위 연산자
            a++ - 후위 연산자

            let a = 5;
            console.log(++a) --> console.log(), a --> 6
            console.log(a++) --> 6 --> +1
            console.log(a) --> 7

        문자열 연결 연산자
            피연산자의 항 중 하나 이상이 문자열인 경우 문자열을 이어서 더해 동작
            "안" + "녕" -> "안녕"
            "안녕하세요" - "하세요" -> NaN
            1 + "2" -> "12"
            "1" + "2" -> "12"
            true + "2" -> "true2"

        할당 연산자
            =
                ex) let a = 5;
            +=
                ex) a += 1; --> a = a + 1
                    //문자열의 경우 반복문과 함께 자주 사용
            -=
                ex) a -= 1; --> a = a - 1
            *=
                ex) a *= 1; --> a = a * 1
            ...

        우선순위
            10 * (2 + 2)

        논리 연산자 / 비교 연산자
        * true / false -> 참이냐 거짓이냐
        비교 연산자 
            == 동등비교     -> x == y (x와 y의 값이 같은지)
                            ex) a = 3
                                b = "3"
                                a == b // true
            === 일치비교    -> x === y (x와 y의 값과 자료형이 같은지)
                            ex) a === b // false
            != 부등비교     -> x !== y (x와 y의 값이 다른지)
                            ex) a != b // a랑 b랑 달라? 응 달라(true), 아니 같아(false)
                                3과 "3" 값이 같음 -> false
            !== 불일치비교  -> x !== y (x와 y의 값 혹은 타입이 다른지)
                            ex) a !== b // a와 b는 값과 타입이 달라? 아니 값은 같지만, 타입은 달라 -> 달라(true)

------------------------------------------------------------------------------

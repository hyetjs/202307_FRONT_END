랜더링 : 사용자 화면에 그려주는 것
마이그레이션 : 이동
json : 자료의 형태

서버 : 외부에서도 접근 가능하도록 한 컴퓨터
프론트엔드 : 웹사이트 접속 -> 리소스 전달 = 사용자가 보는 화면
		데이터를 화면에 어떻게 하면 더 빨리 보여줄 수 있을지 고민

백엔드 : 클라이언트의 요청 -> 데이터베이스 접근 -> CRUD (Create Read Update Delete)
	   백엔드는 다양한 서버와 소통할 수 있으므로 연산 과정을 최소화 -> 서버 비용

—————————————————————————————————————————

기획자, 디자이너, 퍼블리셔, 프론트엔드

요구사항 정의(노션) / WF -> 회의 -> 디자이너 디자인(피그마) -> 
요구 사항 분석 -> 스프린트

—————————————————————————————————————————

요청과 응답
request , response (req , res)

웹브라우저
(요청) ———————————————> 프론트서버
내가 해당 url에 접속했으니 그 페이지에 맞는 화면 요청
	<———————————————
			해당 페이지에 맞는 리소스

http
인터넷 상에서 데이터를 주고 받을 때 사용하는 규약, 규칙
https://www.naver.com

HTTP request message
HTTP response message

’s’ 의 유무는 보안적 요소의 추가, SSL 인증서 유무


—————————————————————————————————————————

VScode
		코드 에디터 툴
		html은 메모장이나 어디에서든 작성할 수 있지만 불편함
		자동완성 , 자동줄바꿈 , 플러그인를 제공하는 에디터를 자주 사용함

		웹스톰 ,  vscode

		https://code.visualstudio.com/download

—————————————————————————————————————————

HTML이란?
	Hyper Text Markup Language
	
	Hyper Text
		: 단순한 텍스트를 초월하여 다른 페이지의 텍스트 혹은 이미지와 같은 모든 리소스에
		접근할 수 있도록 하는 것

	Markup Language
		: 웹 페이지 컨텐츠를 어떻게 표현할지 명령하는 언어

	—> 웹 페이지의 이동, 이미지, 동영상에 접근할 수 있게 해주고 웹 페이지 컨텐츠 제작하는 언어
	—> 웹 페이지 만들 때 쓰는 언어

	주의사항
		: HTML은 단순 텍스트나 이미지 등을 표기할 뿐, 스타일링 되어있지는 않음

	특징 
		: 태그형태를 띄고 있음
		Tag, 해당 태그는 이러한 특징을 가진 요소(element)다

		<태그명 속성명=“속성값”> …(내용) </태그명>
		<태그명 /> — 단일태그
	
		ex)
			<div id=“menu_list” style=“width:300px”> … </div>

—————————————————————————————————————————

	html의 구조
	
	<html> — 최상위 태그 (html입니다)
		<head>
			— 해당 페이지의 정보, 창 타이틀, 검색 엔진 수집 정보, favicon, 미리보기
		</head>
		<body>
			— 사용자 화면에 노출되는 곳, 직접 코드를 작성하게 될 곳
		</body>
	</html>

—————————————————————————————————————————

	vscode 플러그인 (확장 프로그램 = 편리한 기능) 설치

	korean language pack for visual studio code // 우리나라 말 패치
	Live server , Live preview // 여러분이 코드를 수정하거나 작성할 때마다 리빌드를 하지않고
					    // 실시간으로 수정된 상태의 페이지를 확인할 수 있는 가상 웹서버
	auto rename tag
		<div> </div> -> <h2> </div> -> <h2> </h2>
		시작 태그를 바꾸면 종료 태그도 알아서 바꿔주는 플러그인

	prettier-code-formatter // 아직 안 쓸거
		띄어쓰기, 탭, 자동 정렬 즉 코드를 형식에 맞춰 예쁘게 포맷을 일치시켜주는 플러그인
		* 향후에는 해당 규칙을 모든 팀원이 일치화시켜 하나의 컨벤션으로 사용
		——> 모든 팀원이 동일한 코드 형태 (줄바꿈, 띄어쓰기, 탭)

—————————————————————————————————————————

	HTML애서 가장 자주 사용되는 요소

	얖 
	<div> .. </div>
		- 빈도는 가장 높을 수 밖에 없음
		- 하나의 구역
		
	<input />
		- 입력 태그
		- 텍스트 박스
		ex) 아이디, 비밀번호, 검색, 체크박스

	<p> … </p>
		- 한 줄 단위의 글을 작성
		- 위 아래 여백(기본속성), 나중에 초기화

	<span> … </span>
		- 특정 구간을 분간, 단어 선택
		ex)
			<p> 안녕하세요 여러분, 저의 이름은 <span>최혜선</span> 입니다</p>

		<img/>
		<video/>
		<audio/>

			이미지와 동영상, 소리 등을 위한 미디어 요소

		<h1~h6> … </h1~h6>
			제목을 나타내는 요소 (각 숫자에 맞게 폰트 굵기, 위아래 여백)
			h1이 제일 크고 h6이 제일 작지만 css로 수정 가능

		<a> .. </a>
			링크, 페이지 이동
			<a href="URL 주소"> ... </a>
		
		ex) 하이퍼 링크, 메뉴 클릭시 다른 페이지 이동, 책갈피 (네비게이션)

		<select> 
			<option> ... </option>
		</select>

			드롭다운 메뉴

			ex) 이메일로 회원가입 할 때 이메일 양식을 선택할 수 있는 메뉴

		<button> ... </button>

			버튼
			submit, button
		
		<label> ... </label>

			묶어주는 태그, 분류
			ex) 함께 묶여있으면 라벨을 클릭해도 해당 요소가 클릭되는 효과

		<ul>
			...
			<li> ... </li>
		</ul>

			리스트 태그

—————————————————————————————————————————-------------------------

시멘틱 웹 태그
	전 세계에 만들어져있는 웹 문서가 증가함에 따라
	검색 엔진이 정확하게 가치 있는 정보를 탐색하기 위해 요구하는 사항이 늘어날 수 밖에 없음

	따라서 검색 엔진에서 정보를 수집하는 로봇이 웹 사이트에서 더 정확한 정보를 수집할 수 있도록
	요소에 이름을 붙여주기 역할을 부여하는 것

	=> 수집 더 잘되게 역할 부여

	장점 
		1. 웹 접근성 
			남녀노소, 몸이 불편하신 분들도 웹 사이트 이용에 있어서 어떠한 차별 없이
			평등하게 이용할 수 있도록 접근성을 높이는 것

		2. 검색 엔진 최적화
			포털사이트의 자체 알고리즘을 갖춘 수집 로봇이 해당 페이지의 키워드를 추출하는데 있어
			더 정확한 정보를 전달하여 상위 문서에 노출할 수 있도록
		
		3. 가독성
			<!-- header -->
			<div>
			...
			</div>
			<!-- container -->
			<div>
			...
			</div>
			<!-- footer -->
			<div>
			...
			</div>

			======================================================

			<header> ... </header>
			<main> ... </main>
			<footer> ... </footer>


(1) header
	-웹 사이트의 제목, 로고, 검색 폼
(2) hgroup
	- h1 ~ h6을 여러개 묶을 때
(3) nav
	- 메뉴, 목차, 색인(책갈피)
(4) section
	- 한 문서의 구간, 적합한 뜻을 갖지 않을 때 사용
(5) article
	- 웹 페이지에서 독립적으로 존재, 재사용할 수 있는 구간
	  (게시판의 게시글, 상품 목록, 매거진의 뉴스나 기사)
(6) aside
	- 문서의 주요 내용과 간접적으로 연관된 부분, 사이드바
(7) footer
	- 웹 페이지 최하단, 회사 정보, 저작권 정보
... time, figure, fieldlist, datalist, mark, summary, main ...

—————————————————————————————————————————-------------------------

table
	- 표, 여러 종류의 데이터를 구분하여 보기 좋게 정리하기 위해 사용하는 요소
	
ex)
	<table>
		<caption> .. 표 이름 .. </caption>
		<!-- 분류 -->
		<thead>
			<tr> -- table row (가로 줄, 행)
				<th or td> -- table head/data (세로 줄, 열)
					...
				</th or /td>
			</tr>
			=> 첫번째 tr의 th/td의 갯수가 전체 표의 열의 갯수
		</thead>
		<!-- 내용 -->
		<tbody>
			<tr>
				<td></td>
			</tr>
			<tr>
				<td></td>
			</tr>
		</tbody>
		<!-- 각주, 주석 -->
		<tfoot></tfoot>
	</table>


—————————————————————————————————————————-------------------------

datalist
	HTML5에 추가, 비교적 최신 요소
	검색(미리보기)이/가 가능한 input을 만든다

	=> 예시 데이터를 작성하고 input에 사용자가 데이터를 입력할 때
	   예시 데이터로 시작하는 단어를 작성하면 해당 데이터를 기반으로 미리보기
	
	ex)
		고

		data 
			고구마
			고냉지
			고양이
			고속도로

		<input type="text" list="리스트명" />
		<datalist id="리스트명">
			<option> 미리보기1 </option>
			<option> 미리보기2 </option>
			<option> 미리보기3 </option>
		</datalist>

—————————————————————————————————————————-------------------------

*form
	입력 폼에 사용자가 입력한 데이터를 웹 페이지에서 처리쪽 전송하기 위해
	사용하는 태그

	현재에는 이런 기능을 중지 시킵니다. jsp나 spring 등에서는 사용
	enter를 눌렀을 때 버튼이 클릭 따로 입력 요소를 가지고 오는 작업이 없어도
	입력된 데이터의 값을 가지고 올 수 있음

	=> 즉 데이터 전송 시에 편의성을 위해서 사용

	*
		action
		--------
		method
		--------


		ex)
			<form action="처리할 주소, 목적지" method="GET, POST">
				<input/>
				<input/>
				<button type="button"></button>
				<input/>
				<input/>
				<button type="button"></button>
				<input/>
				<button></button> / type === submit
			</form>

—————————————————————————————————————————-------------------------

iframe
	-- 다른 웹 서버의 인터페이스를 가져와 웹 페이지에 보여주는 요소

—————————————————————————————————————————-------------------------


시멘틱 웹 태그 예시
table, datalist, form, iframe(사용)
--------
css

—————————————————————————————————————————-------------------------

https://developer.mozilla.org/ko/docs/Web/HTML



hooks function (훅함수)

    Class Components
        Life Cycle(생명주기)
        [페이지가 열렸을 때] ----------- [페이지가 닫힐 때 까지]
        하나의 페이지의 생명주기 동안 발생해야하는 이벤트를 관리하기 위해서

    functional Components
        Hooks function

            useState
                - react의 상태를 관리할 수 있는 hook 함수
                - 상태는 상태를 바꿀 수 있는 함수로만 값을 변경할 수 있습니다.

                ex) const [변수명, 변수를 바꿀 수 있는 함수] = useState(기본값)

                    const [state, setState] = useState(true)
                    const.log(state) // true

                    state = false (x)
                    setState(false) (o)

                    * rerender = 화면을 다시 그려준다
                               = 함수형 컴포넌트(함수)를 재실행

            useRef
                - 리랜더(함수가 재실행) 기존에 있던 값이 초기화
                - 하지만, ref로 선언된 값은 초기화 되지 않는다
                - dom 객체에 접근할 때도 사용 가능 
                ex) 
                    function a(){
                        const b = 5;
                        b++
                        return b
                    }

                    console.log(a()) // 6
                    console.log(a()) // 6

            useEffect
                effct = 효과
                특정 시점에 효과를 실행시키거나 다루기 위해 필요한 훅 함수
                
                ex)
                    컴포넌트가 열렸을 때부터
                    특정한 값이 변화되었거나, 특정한 순간에
                    컴포넌트가 사라질 때

                내가 실행하고자 싶은 effct를 실행시킬 수 있는 훅함수

                ex)
                    useEffect(()=>{
                        console.log("didmount") // 컴포넌트가 열렸을 떄
                        return () => {
                            console.log("unmount) // 컴포넌트가 닫혔을 때
                        }
                    },[])

                ex) useEffect(()=>{
                         console.log("message에 변화가 생겼습니다")
                    }, [message]) ---> 의존성 배열
                                   useEffect에 대한 실행이 해당 배열의 값에 의존하고 있다


            useMemo
                rerendering
                복잡한 연산의 결과 값이 있음(연산 횟수가 높은 값)
                리랜더가 되어도 이 연산의 결과 값이 같다면? 다시 연산할 필요가 있는가

                특정 연산(함수)의 결과값(return)을 캐싱(기억)하고 있다가
                리랜더 되어도 해당 연산을 하지 않고 값만 재사용

                캐싱은 코스트가 필요없을까요? (필요합니다)

                useMemo를 사용하면 초기랜더링에 시간이 더 소요
                그 이후의 리랜더링 시간이 감소

                ex)

                const a = ()()

                const a = () => {}
                a()

                --------------------- 시간복잡도(연산 횟수)가 높다면

                 const a = useMemo(()=>{
                    // 중첩 for
                    // while 무한루프
                    return ?
                 },[])

                => 리랜더 될 떄마다 특정함수를 실행시킨다면
                   그리고 그 결과값이 같다면 다시 연산할 필요가 있는가?

                ---------------------

            useCallback
                rerendering
                함수의 선언과 관련이 있습니다.

                함수 선언에 대한 코스트가 높다면? 특정 함수를 매번 리랜더만다 선언해야할까?
                화면이 리랜더 되어도 함수를 선언하지 않고 해당 함수를 기억해서 사용

                대표적으로 백엔드와 통신하거나, props로 전달되는 거대한 함수 혹은
                컴포넌트를 반환하는 함수에 많이 사용

                useMemo는 연산의 결과 값
                useCallback 함수 선언 자체

            ex)
                const a = useMemo( ()=> return ? )

                const a = useCallback(()=>{
                }, [])

                a()

                * 주의사항 useCallback에 사용된 변수나 상태는
                값을 캐싱하고 있기때문에 변화해도 인지가 불가능

                useCallback 사용시에 내부에 변수나 상태가 있고 변화할 가능성이 있다면
                의존성 배열에 반드시 넣어줘야 정상 작동

                 ---------------------

                의존성 배열이 존재한다.
                useMemo = 개발자가 원하는 시점에 다시 재연산
                useCallback = 개발자가 원하는 시점에 다시 선언 


-----------------------------------------------------------------------------

checkList (Yes / No)

1. 나는 중첩 라우트를 활용하여 각 라우트에 따라 다른 레이아웃을 적용할 수 있다.
2. 나는 중복되는 UI에 관련된 중복되는 코드를 제거하고 효율적으로 관리할 수 있다.
3. 나는 특정한 조건이 true일 때만 원하는 component를 render 할 수 있다.
4. 나는 react의 상태를 생성 및 관리하기 위해 hooks 함수를 사용할 수 있다.
5. 나는 react에서 상태가 변경되면 어떤 일이 일어나는지 인지하고 적절히 상태를 변경할 수 있다.
6. 나는 useState와 useRef의 차이를 인지하고 의도에 따라 원하는 hook 함수를 선택할 수 있다.

-----------------------------------------------------------------------------

hooks 이용한 todolist 만들기 할거에요

주의 사항
1. 따라칠꺼면 만들지 마세요 듣고, 내가 구현하고 싶은 것으로 구현해보세요
2. 따라치되 이해가 되지 않는 것은 되짚어보고 복습, 예습 잘할 자신 있으면 따라치세요

"따라 치고 - 안보고 치고 - 새롭게 치고"

-----------------------------------------------------------------------------



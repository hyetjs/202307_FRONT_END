
(SPA, CSR)
번들 -> 페이지 코드 압축(모든 페이지의 정보) -> 페이지를 이동할 때마다 번들을 다시 필요가 있나?

a 태그나 location 객체로 데이털르 이동하면 페이지를 다시 접속 -> bundle 다시 다운로드 (x)
Link, useNavigate를 사용하여 이미 다운로드 받아진 bundle 내의 코드를 재사용 (o)

(1) routes에 pages에서 생성된 컴포넌트(도메인을 의미하며 가장 큰 단위의 컴포넌트)를 연결
(2) react에서는 상태가 변경 되어야만 화면을 리랜더한다.
(3) a, location 대신 Link나 useNavigate를 사용한다.

--------------------------------------------------------------------------

 Q. 뒤로가기 버튼 클릭 시 이전의 데이터를 호출하기 위해서 어떠한 방법을 사용할 수 있을까?
    뒤로가기를 클릭하면 페이지가 이동되고 페이지가 이동되면 함수나 변수는 초기화

    URL을 이용하여 데이터 보존이 가능

    1. 웹사이트 내에 페이지 간의 데이터 보존을 위하여
    2. 주소 히스토리를 이용하여 뒤로가기 지원
 
--------------------------------------------------------------------------  

  주소로 데이터를 관리하는 방법

  1. URL parameter === url params -> '/'
    https://zl존성용123.com/goods/32123 ---> 완전히 새로운 페이지

     original path ->  https://zl존성용123.com/goods/32123

----------------------------------------------------------------------

  2. Query string(parameter) === params -> '?','&'
    https://zl존성용123.com/goods?prodId=32123&color=red

    original path ->  https://zl존성용123.com/goods

----------------------------------------------------------------------

  p.s => 백엔드에도 URL parameter가 존재하고
         우리는 해당 parameter에 맞게 데이터를 전송
         그러나 백엔드가 요청하는 데이터의 경우 다수일 가능성이 높습니다.

         axios.get('/goods/31232', {
                          ------ url parameter
            params: {
              color: "red"
                     ---- querystring -> /goods/31232?color=red
            }
         })

  => 사이트간의 데이터 보존, 주소 히스토리를 통한 뒤로가기 지원을 위하여 데이터를 URL로 관리
     url parameter, querystring

-------------------------------------------------------------------------  

  React에서 CSS 적용 방법

  1. css-in-js
    css 파일이 아니어도 하나의 js 안에서 css 작성이 가능 
    ex) styled-components, emotion
    
    현재로서 우리나라에서는 실무에서 가장 많이 사용하는 css 작성 방법

    [장점]
    css 파일이 생성 되지 않습니다
    하나의 js에서 스타일을 관리하기 때문에 유지보수 용이
    class name에 관하여 고민할 필요가 없습니다

    npm i styled-components

-------------------------------------------------------------------------

  2. pure css / scss + post css
    일반적인 css, 그러나 모듈로 분리되어있는 리엑트의 특성상 class name을 주기 힘들다.
    post css를 사용하면 모듈단위로 css를 분리

    ex) app.module.css

    [장점]
    퍼블리셔가 작성한 css 파일을 변환 없이 그대로 사용할 수 있음
    [단점]
    파일 관리가 힘들다

-------------------------------------------------------------------------

  3. tailwind css / panda css
    현재 가장 주목받고 최신 스택에 포함되는 css
    이미 작성된 class명으로 css 작성할 수 있으며, 생산성 증가

    ex) <div class="text-green w300 h200">

    [장점]
    생산성이 증가
    [단점]
    className을 알고 있어야함, html이 지저분해짐, 세분화된 컴포넌트화

-------------------------------------------------------------------------

  todolist toyproject

    components
      main
        layout
          footer.js
          header.js
          layout.js
        common
          button.js
          input.js
        pages
          main
            components
              sign-in.js
              sign-up.js  
            index.js

-----------------------------------------------------------------------

  컴포넌트를 나누는 기준?
    1. 가독성 없는 복잡한 UI
      ex)
        <div> 
            <div>
              <div> 김성용 </div> ---> <UserInfo />
              <div> 20살 </div>
              <div> 190cm </div>                  
            <div>
            <div></div>
            <div></div>
            <div></div>
        </div>

    2. 재사용이 가능한 UI
        <button></button>
        <input/>

    3. 랜더링 최적화
        리랜더 되었을 때 상태를 가진 컴포넌트만 리랜더 되어야하므로
        컴포넌트를 분할해서 관리

    4. 관심사의 분리

-------------------------------------------------------------------------

  emotion / styled components (css-in-js)

  npm i styled-components

  styled.button
  styles.button

-------------------------------------------------------------------------

  구조분해할당
  const [a, b] = [123, 456]
  const { name } = seongyong
  
-------------------------------------------------------------------------

 HOC(Higher-Order-Components)

  컴포넌트를 인자로 받아 새로운 컴포넌트로 변환해 컴포넌트 로직을
  재사용하기 위한 컴포넌트

  <부모>
    컴포넌트의 공통되는 로직
    <자식> // 자식이 바뀌어도 공통되는 로직이 실행
  </부모>

  1. 레이아웃
  2. 로그인 인증(권한에 따른 페이지 접근)
  => 매번 써주기 불편한대? 그냥 부모에 써주자

  


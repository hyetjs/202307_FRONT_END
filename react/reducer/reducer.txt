
전역 상태 관리
    : 상태(state)를 전역으로 분류하여 모든 컴포넌트에서 해당 state를 공유
    : rerender가 되어도 상태가 유지 되기 때문에 props로 전달 할 필요가 없음 -> 다른 컴포넌트에 선언
    : A라는 컴폰너트에서 변수 a, B라는 컴포넌트에서 변수 a -> 똑같은 a를 공유 받기 위해 props로 전달

    #1 불효
    자식 컴포넌트에게 값을 전달해주기 위해 상위 컴포넌트가 값을 알아야 할 필요가 있는가
    todo.js

    #2 propd drilling
    A(props) -> B(전달) -> C(전달) -> D(props)


    * 단점
    1. 추적이 어려워짐 -> 상태 변화의 로직이 여기저기 있거나, 복잡한 경우 추적이 힘들어짐
    2. 캐싱, 전역 리랜더링 -> 코스트가 필요하다

    => 전역 상태관리하면 편리하긴 하지만, 코스트에 대해서 고민할 필요가 있다

종류
    useReducer, useContext (React의 빌트인 함수) -- o
    Redux (현재 채용 시장 및 사용률 1위, 망해야할 라이브러리 순위 1위) -- o
    RTK (Redux-tool-kit) -- o
    Mobx
    Recoil (가장 많이 사용하고 있는 상태관리 도구) -- o
    jotai (rocil-경량화)
    zustand (redux-경량화)

-------------------------------------------------------------------------------

 전역 상태 관리?
   1. props drilling
   2. 불효

-------------------------------------------------------------------------------

 useReducer
    전역 상태 관리는 아닙니다.
    useState
    ->  상태를 만듬, 그 상태를 관리하는 로직을 전역

    상태를 생성하고, 그 상태를 관리하는 로직을 바깥으로 빼내어 공용으로 관리하고
    dispatcher를 통해 action 객체를 전달하여 상태를 변경
    (명령을 내린다)

    상태가 복잡하여 상태의 대한 변경이 복잡하고 이러한 로직이 여러 컴포넌트에서 재사용될 때
    사용하기 용이한 hook 함수

-------------------------------------------------------------------------------

useContext*
    store, 전역 상태 관리를 위한 hooks function, 최상위 선언

-------------------------------------------------------------------------------

    Redux

    flux 패턴 (단방향 패턴)
    store(데이터 저장소) -> view(화면, 컴포넌트) -> action(사용자의 행동) -> dispatcher(전달체) -> store(갱신)

-------------------------------------------------------------------------------

id 선택자 => "#"
class 선택자 => "."

자식 선택자 => ">"
자소 선택자 => " "

--------------------------------------------------------------------

(1) 형제 선택자
    - 일반 형제
        형제 관계를 갖는 요소 중 다음에 나오는 모든 이웃 요소를 선택

        형선택자 ~ 동생 선택자 {
            ...CSS 문법
        }

        ex)
            a ~ li { // a태그 '다음'으로 나오는 요소(이웃한) 중 li를 모두 선택
            }

    - 인접 형제
        형제 관계를 갖는 요소 중 형 요소에 가장 가까운 이웃 요소를 선택
        
        형선택자 + 동생 선택자 {
            ...CSS 문법
        }

        ex)
            <ul>
                <li></li>
                <a></a>
                <li></li>
                <li></li>
                <li></li>
            </ul>

--------------------------------------------------------------------

(2) 속성 선택자
    속성(properties)?
        <div id="hyesun"></div>
        <요소명 속성="속성값"></요소>
        <input type="radio, checkbox, color, date"/>

        [속성명]{ //속성값이 있는

        }

        [속성명="속성값"]{ //정확히 속성명이 속성값과 일치하는

        }

        ex) [type="checkbox"]{
            ...CSS 문법
        }

        .login-user-name-input[type="text"]{

        }

        * 속성 선택자 심화
            [속성명 ~= "속성값"] -> 값이 속성값과 다른 값이 띄어쓰기로 구성
            ex) name="apple banana"

            [속성명 *= "속성값"] -> 속성값이 포함된
            ex) name="bbapplecc" 

            [속성명 $= "속성값"] -> 속성값이 접미사로 끝나는
            ex) name="~apple"

            [속성명 ^= "속성값"] -> 속성값이 접두사로 시작하는
            ex) name="apple~"

            [속성명 |= "속성값"] -> 속성값이 완벽히 일치하거나, -으로 연결된 요소
            ex) name="apple"
                name="apple-~"

--------------------------------------------------------------------

(3) 가상 클래스 선택자
    클래스나 아이디 부여 없이 순서에 따라 혹은 가상적인 요소에 따라 원하는 요소를 선택

    :nth-child(n)     
    :nth-of-type(n)

    n번째 자식을 선택
    ex) 
        ul > li:nth-child(3){}

        <ul>
            <li></li>
            <li></li>
            <li></li> <--- css
            <li></li>
        </ul>

    => nth 선택자는 순서가 정해져있으므로, 반드시 순서가 고정인 것이 아니라면 지양

    :first-child
    :first-of-type
    :last-child
    :last-of-type

    => nth-child vs nth-of-type(o)
        -다른 요소 포함, 다른 요소 미포함

    ex)
        li:nth-child(3), li:nth-of-type(3)
    <ul>
        <li></li>
        <p></p>
        <li></li> --> nth-child
        <li></li> --> nth-of-type
    </ul>

--------------------------------------------------------------------

(4) 가상 요소 선택자
    
    선택자::before
    선택자::after
        해당 요소 뒤, 혹은 앞에 가상의 요소를 만들어냄

    ex)
        [name="sign-in"]::after{
            content : "|",
            ...CSS 문법
        }

        로그인 | 회원가입

아하! 모먼트

    옛날에는 float라는 속성으로 수평 정렬, flexible layout, grid layout을 통해 정렬
    float를 쓸 때는 가상요소를 생성하여 수평 정렬을 맞춰줘야했다. 따라서 현재는 가상요소는 태그를
    만들지 않아도 태그를 꾸며줄 수 있도록 편의성 용도로만 사용한다. 그러나 사용하지 않아도 무방

--------------------------------------------------------------------

* 자주 사용하는 가상 선택자는

    :link --> 링크가 연결되어있을 때 어떤 css를 줄건지
    :visited --> 링크를 방문한 적이 있을 때 어떤 css를 줄건지

    ex) a:link{
        color: red;
    }

    :active --> 마우스가 해당 요소를 클릭하고 있을 때
    :hover --> 마우스가 해당 요소에 위치하고 있을 때

    :focus --> 입력 요소에 커서가 활성화 되었을 때 (작성 가능)
    ::placeholder --> 입력 요소의 플레이스 홀더를 선택

    ex) input::placeholder {
        color: red;
    }

    : 자기자신, ::가상요소

--------------------------------------------------------------------

CSS의 color

    표현법
        1. 색상 이름
            red, black, white ...

        2. RGB 값
            (0~255) red, green, blue

            rgb(0~255, 0~255, 0~255)
            rgba(0~255, 0~255, 0~255, 0~1)
                                      --- 알파, 투명도
            ex)
                rgb(255, 0, 0) // 빨간색
                rgb(0, 0, 0) // 검정색
                rgb(255, 255, 255) // 하얀색

        3. 16진수
            (00~FF)
            "#6자리"

            ex)     r   g  b
            color: #00/00/00

            ex)
                #ff0000 // 빨간색
                #000000 // 검정색
                #ffffff // 하얀색

--------------------------------------------------------------------

CSS Text properties

    *** color : 텍스트 색상

    * letter-spacing : 자간

    word-spacing : 단어 간격

    *** text-align : 텍스트 정렬 (left, right, center)

    *** line-height : 줄간(행간)

    * text-indent : 첫 줄의 들여쓰기(여백)

    * text-decoration : 텍스트의 여러가지 효과(밑줄)을 설정

    text-transform : 대문자를 소문자로, 소문자를 대문자로 만들 수 있음

    font-variant : 소문자를 더 작은 크기의 대문자로 변환

    * text-shadow : 텍스트의 그림자나 번짐 효과등을 설정

    * white-space : 띄어쓰기, 들여쓰기, 줄바꿈 등을 어떻게 처리할지 

    * text-overflow : 텍스트가 기준을 벗어난 경우 보일건지 안보일건지, ...더보기

    *** font-size : 텍스트의 크기

    *** font-weight : 텍스트의 굵기

    *** font-family : 텍스트의 글꼴

--------------------------------------------------------------------
